plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.palantir.docker' version '0.35.0'
}

ext{
    axonVersion = "4.6.0"
}

group = 'com.jh-pay.membership'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation project(path: ':common')

    runtimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    println(tasks.bootJar.outputs.files)

    // 이미지 이름
    name rootProject.name+'-'+project.name + ":" + version

    // 어떤 도커파일을 사용할지 지정
    dockerfile file('./Dockerfile')

    // 어떤 파일들은 도커파일에 복사할 것인가
    files tasks.bootJar.outputs.files

    // 도커파일에 전달할 인자들
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}
